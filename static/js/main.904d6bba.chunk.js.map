{"version":3,"sources":["components/forms/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Contact","formik","useFormik","initialValues","name","email","phone","onSubmit","values","alert","JSON","stringify","console","log","validate","errors","length","test","className","handleSubmit","htmlFor","type","id","placeholder","onChange","handleChange","onBlur","handleBlur","value","touched","href","download","Date","getFullYear","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8RAgIeA,MA5Hf,WAIE,IAAMC,EAASC,YAAU,CACvBC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,MAAO,IAGTC,SAAU,SAACC,GACTC,MAAMC,KAAKC,UAAUH,IACrBI,QAAQC,IAAIL,IAGdM,SAAU,SAACN,GAKT,IAAIO,EAAS,GAsBb,OAnBKP,EAAOJ,KAEDI,EAAOJ,KAAKY,OAAS,IAC9BD,EAAOX,KAAO,wCAFdW,EAAOX,KAAO,oBAIXI,EAAOH,MAGT,4CAA4CY,KAAKT,EAAOH,SAEzDU,EAAOV,MAAQ,0BAJfU,EAAOV,MAAQ,qBAOZG,EAAOF,MAEDE,EAAOF,MAAMU,OAAS,KAC/BD,EAAOT,MAAQ,qDAFfS,EAAOT,MAAQ,qBAKVS,KASX,OAHAH,QAAQC,IAAI,cAAeZ,EAAOc,QAIhC,6BAASG,UAAU,eACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,0BAAMX,SAAUN,EAAOkB,cACrB,wBAAID,UAAU,gBAAd,cADF,IAC+C,6BAC7C,2BAAOE,QAAQ,QAAf,aACA,2BACEC,KAAK,OACLH,UAAU,eACVd,KAAK,OACLkB,GAAG,OACHC,YAAY,kBACZC,SAAUvB,EAAOwB,aACjBC,OAAQzB,EAAO0B,WACfC,MAAO3B,EAAOO,OAAOJ,OAEtBH,EAAO4B,QAAQzB,MAAQH,EAAOc,OAAOX,KACpC,yBAAKc,UAAU,eAAejB,EAAOc,OAAOX,MAC1C,KACJ,2BAAOgB,QAAQ,SAAf,iBACA,2BACEC,KAAK,OACLH,UAAU,eACVd,KAAK,QACLkB,GAAG,QACHC,YAAY,2BACZC,SAAUvB,EAAOwB,aACjBC,OAAQzB,EAAO0B,WACfC,MAAO3B,EAAOO,OAAOH,QAEtBJ,EAAO4B,QAAQxB,OAASJ,EAAOc,OAAOV,MACrC,yBAAKa,UAAU,eAAejB,EAAOc,OAAOV,OAC1C,KACJ,2BAAOe,QAAQ,SAAf,gBACA,2BACEC,KAAK,OACLH,UAAU,eACVd,KAAK,QACLkB,GAAG,QACHC,YAAY,6CACZC,SAAUvB,EAAOwB,aACjBC,OAAQzB,EAAO0B,WACfC,MAAO3B,EAAOO,OAAOF,QAEtBL,EAAO4B,QAAQvB,OAASL,EAAOc,OAAOT,MACrC,yBAAKY,UAAU,eAAejB,EAAOc,OAAOT,OAC1C,KACJ,6BACA,4BAAQe,KAAK,SAASH,UAAU,6BAC9B,yCAMR,uBAAGA,UAAU,cACX,kDAEE,uBAAGY,KAAK,4BAA4BC,UAAQ,GAA5C,eAHJ,mBAOoB,IAAIC,MAAOC,cAP/B,2CCrGOC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.904d6bba.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Contact.css\";\r\nimport { useFormik } from \"formik\"; // import Formik Hook\r\n\r\nfunction Contact() {\r\n  //Step: 1\r\n  //useFormik is a React hook that will return all Formik state and helpers directly\r\n  // pass it a intivialValue which is an object\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n    },\r\n    //Step:2 add  onSubmit: values => {alert(JSON.stringify(values, null, 2));\r\n    onSubmit: (values) => {\r\n      alert(JSON.stringify(values));\r\n      console.log(values);\r\n    },\r\n    //3rd argument to useFormik function\r\n    validate: (values) => {\r\n      //values.name , values.email, values.phone because values func is object\r\n      //Errors is similar to values func: errors.name, errors.email, errors.phone\r\n      //errors.name = 'This field is required'\r\n      //Define func body\r\n      let errors = {};\r\n\r\n      //Check if fields are empty or not\r\n      if (!values.name) {\r\n        errors.name = \"Name is required!\";\r\n      } else if (values.name.length < 3) {\r\n        errors.name = \"Name must be more than 3 characters!\";\r\n      }\r\n      if (!values.email) {\r\n        errors.email = \"Email is required!\";\r\n      } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n      ) {\r\n        errors.email = \"Invalid email address!\";\r\n      }\r\n\r\n      if (!values.phone) {\r\n        errors.phone = \"Phone is required!\";\r\n      } else if (values.phone.length < 10) {\r\n        errors.phone = \"Phone number should be at least 10 digit numbers!\";\r\n      }\r\n\r\n      return errors;\r\n    },\r\n  });\r\n  //Step:2 Add onChange = { formik.handleChange } and value = { formik.values.lastName } in form fields\r\n\r\n  //console.log(formik.values);\r\n  console.log(\"form errors\", formik.errors);\r\n\r\n  //Step:3 add onSubmit={formik.handleSubmit} on the form tag\r\n  return (\r\n    <section className=\"main_formik\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <form onSubmit={formik.handleSubmit}>\r\n              <h1 className=\"text-primary\">Contact Us</h1> <hr />\r\n              <label htmlFor=\"name\">Full Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                placeholder=\"Enter your name\"\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                value={formik.values.name}\r\n              />\r\n              {formik.touched.name && formik.errors.name ? (\r\n                <div className=\"text-danger\">{formik.errors.name}</div>\r\n              ) : null}\r\n              <label htmlFor=\"email\">Email Address</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                placeholder=\"Enter your email address\"\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                value={formik.values.email}\r\n              />\r\n              {formik.touched.email && formik.errors.email ? (\r\n                <div className=\"text-danger\">{formik.errors.email}</div>\r\n              ) : null}\r\n              <label htmlFor=\"phone\">Phone Number</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"phone\"\r\n                id=\"phone\"\r\n                placeholder=\"Enter your phone number ex. (555)-555-5555\"\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                value={formik.values.phone}\r\n              />\r\n              {formik.touched.phone && formik.errors.phone ? (\r\n                <div className=\"text-danger\">{formik.errors.phone}</div>\r\n              ) : null}\r\n              <br />\r\n              <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                <b>SUBMIT</b>\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        <p className=\"copy-right\">\r\n          <p>\r\n            Download the design:\r\n            <a href=\"./react-formic-design.png\" download>\r\n              Click Here\r\n            </a>\r\n          </p>\r\n          &copy; Copyright {new Date().getFullYear()}. All Rights Reserved.\r\n          Mahmoud Osman\r\n        </p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Contact;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Contact from \"./components/forms/Contact\";\n\nfunction App() {\n  return (\n    <div>\n      <Contact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}